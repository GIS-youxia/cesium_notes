/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["exports","./defined-b9ff0e39","./Check-e6691f86","./defaultValue-199f5aa8","./Math-2145e044","./Cartesian2-40ed5530","./defineProperties-ae15c9d5"],function(t,k,R,n,D,y,a){"use strict";function I(t,a,e,i,n,s,r){var h,d,o=(h=t)*(d=e)*(4+h*(4-3*d))/16;return(1-o)*t*a*(i+o*n*(r+o*s*(2*r*r-1)))}var E=new y.Cartesian3,T=new y.Cartesian3;function s(t,a,e,i){var n,s,r,h,d,o,c,u,M,l,g,_,f,p,C,v,m,H,O,q,S,b,k,U,w,A=y.Cartesian3.normalize(i.cartographicToCartesian(a,T),E),P=y.Cartesian3.normalize(i.cartographicToCartesian(e,T),T);R.Check.typeOf.number.greaterThanOrEquals("value",Math.abs(Math.abs(y.Cartesian3.angleBetween(A,P))-Math.PI),.0125),function(t,a,e,i,n,s,r){var h,d,o,c,u,M=(a-e)/a,l=s-i,g=Math.atan((1-M)*Math.tan(n)),_=Math.atan((1-M)*Math.tan(r)),f=Math.cos(g),p=Math.sin(g),C=Math.cos(_),v=Math.sin(_),m=f*C,H=f*v,O=p*v,q=p*C,S=l,b=D.CesiumMath.TWO_PI,k=Math.cos(S),U=Math.sin(S);do{k=Math.cos(S),U=Math.sin(S);var w,A=H-q*k;o=Math.sqrt(C*C*U*U+A*A),d=O+m*k,h=Math.atan2(o,d),b=S,u=d-2*O/(c=0===o?(w=0,1):1-(w=m*U/o)*w),isNaN(u)&&(u=0),S=l+I(M,w,c,h,o,d,u)}while(Math.abs(S-b)>D.CesiumMath.EPSILON12);var P=c*(a*a-e*e)/(e*e),R=P*(256+P*(P*(74-47*P)-128))/1024,y=u*u,E=e*(1+P*(4096+P*(P*(320-175*P)-768))/16384)*(h-R*o*(u+R*(d*(2*y-1)-R*u*(4*o*o-3)*(4*y-3)/6)/4)),T=Math.atan2(C*U,H-q*k),x=Math.atan2(f*U,H*k-q);t._distance=E,t._startHeading=T,t._endHeading=x,t._uSquared=P}(t,i.maximumRadius,i.minimumRadius,a.longitude,a.latitude,e.longitude,e.latitude),t._start=y.Cartographic.clone(a,t._start),t._end=y.Cartographic.clone(e,t._end),t._start.height=0,t._end.height=0,s=(n=t)._uSquared,r=n._ellipsoid.maximumRadius,h=n._ellipsoid.minimumRadius,d=(r-h)/r,o=Math.cos(n._startHeading),c=Math.sin(n._startHeading),u=(1-d)*Math.tan(n._start.latitude),M=1/Math.sqrt(1+u*u),l=M*u,g=Math.atan2(u,o),p=1-(f=(_=M*c)*_),C=Math.sqrt(p),b=1-3*(v=s/4)+35*(m=v*v)/4,k=1-5*v,U=(q=1+v-3*m/4+5*(H=m*v)/4-175*(O=m*m)/64)*g-(S=1-v+15*m/8-35*H/8)*Math.sin(2*g)*v/2-b*Math.sin(4*g)*m/16-k*Math.sin(6*g)*H/48-5*Math.sin(8*g)*O/512,(w=n._constants).a=r,w.b=h,w.f=d,w.cosineHeading=o,w.sineHeading=c,w.tanU=u,w.cosineU=M,w.sineU=l,w.sigma=g,w.sineAlpha=_,w.sineSquaredAlpha=f,w.cosineSquaredAlpha=p,w.cosineAlpha=C,w.u2Over4=v,w.u4Over16=m,w.u6Over64=H,w.u8Over256=O,w.a0=q,w.a1=S,w.a2=b,w.a3=k,w.distanceRatio=U}function e(t,a,e){var i=n.defaultValue(e,y.Ellipsoid.WGS84);this._ellipsoid=i,this._start=new y.Cartographic,this._end=new y.Cartographic,this._constants={},this._startHeading=void 0,this._endHeading=void 0,this._distance=void 0,this._uSquared=void 0,k.defined(t)&&k.defined(a)&&s(this,t,a,i)}a.defineProperties(e.prototype,{ellipsoid:{get:function(){return this._ellipsoid}},surfaceDistance:{get:function(){return R.Check.defined("distance",this._distance),this._distance}},start:{get:function(){return this._start}},end:{get:function(){return this._end}},startHeading:{get:function(){return R.Check.defined("distance",this._distance),this._startHeading}},endHeading:{get:function(){return R.Check.defined("distance",this._distance),this._endHeading}}}),e.prototype.setEndPoints=function(t,a){R.Check.defined("start",t),R.Check.defined("end",a),s(this,t,a,this._ellipsoid)},e.prototype.interpolateUsingFraction=function(t,a){return this.interpolateUsingSurfaceDistance(this._distance*t,a)},e.prototype.interpolateUsingSurfaceDistance=function(t,a){R.Check.defined("distance",this._distance);var e=this._constants,i=e.distanceRatio+t/e.b,n=Math.cos(2*i),s=Math.cos(4*i),r=Math.cos(6*i),h=Math.sin(2*i),d=Math.sin(4*i),o=Math.sin(6*i),c=Math.sin(8*i),u=i*i,M=i*u,l=e.u8Over256,g=e.u2Over4,_=e.u6Over64,f=e.u4Over16,p=2*M*l*n/3+i*(1-g+7*f/4-15*_/4+579*l/64-(f-15*_/4+187*l/16)*n-(5*_/4-115*l/16)*s-29*l*r/16)+(g/2-f+71*_/32-85*l/16)*h+(5*f/16-5*_/4+383*l/96)*d-u*((_-11*l/2)*h+5*l*d/2)+(29*_/96-29*l/16)*o+539*l*c/1536,C=Math.asin(Math.sin(p)*e.cosineAlpha),v=Math.atan(e.a/e.b*Math.tan(C));p-=e.sigma;var m=Math.cos(2*e.sigma+p),H=Math.sin(p),O=Math.cos(p),q=e.cosineU*O,S=e.sineU*H,b=Math.atan2(H*e.sineHeading,q-S*e.cosineHeading)-I(e.f,e.sineAlpha,e.cosineSquaredAlpha,p,H,O,m);return k.defined(a)?(a.longitude=this._start.longitude+b,a.latitude=v,a.height=0,a):new y.Cartographic(this._start.longitude+b,v,0)},t.EllipsoidGeodesic=e});
