/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./defined-b9ff0e39","./Check-e6691f86","./freezeObject-2d5b18ce","./defaultValue-199f5aa8","./Math-2145e044","./Cartesian2-40ed5530","./defineProperties-ae15c9d5","./Transforms-94513c2d","./RuntimeError-d5522ee3","./WebGLConstants-554ddbe2","./ComponentDatatype-9477db2c","./GeometryAttribute-4754007e","./when-c208a7cf","./GeometryAttributes-c3465b51","./IndexDatatype-668aa2f9","./IntersectionTests-f6d27a39","./Plane-297770b0","./arrayRemoveDuplicates-32bbc2e4","./BoundingRectangle-1f97a102","./EllipsoidTangentPlane-1ba7ce65","./EllipsoidRhumbLine-d5ed1c3f","./PolygonPipeline-eaa2424e","./PolylineVolumeGeometryLibrary-ee24167c","./EllipsoidGeodesic-b257688e","./PolylinePipeline-5ad419cb"],function(d,u,e,c,t,y,i,f,r,n,h,g,a,v,m,o,l,s,p,E,P,_,b,k,C){"use strict";function D(e){var i=(e=c.defaultValue(e,c.defaultValue.EMPTY_OBJECT)).polylinePositions,r=e.shapePositions;if(!d.defined(i))throw new u.DeveloperError("options.polylinePositions is required.");if(!d.defined(r))throw new u.DeveloperError("options.shapePositions is required.");this._positions=i,this._shape=r,this._ellipsoid=y.Ellipsoid.clone(c.defaultValue(e.ellipsoid,y.Ellipsoid.WGS84)),this._cornerType=c.defaultValue(e.cornerType,b.CornerType.ROUNDED),this._granularity=c.defaultValue(e.granularity,t.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeOutlineGeometry";var n=1+i.length*y.Cartesian3.packedLength;n+=1+r.length*y.Cartesian2.packedLength,this.packedLength=n+y.Ellipsoid.packedLength+2}D.pack=function(e,i,r){if(!d.defined(e))throw new u.DeveloperError("value is required");if(!d.defined(i))throw new u.DeveloperError("array is required");var n;r=c.defaultValue(r,0);var t=e._positions,a=t.length;for(i[r++]=a,n=0;n<a;++n,r+=y.Cartesian3.packedLength)y.Cartesian3.pack(t[n],i,r);var o=e._shape;for(a=o.length,i[r++]=a,n=0;n<a;++n,r+=y.Cartesian2.packedLength)y.Cartesian2.pack(o[n],i,r);return y.Ellipsoid.pack(e._ellipsoid,i,r),r+=y.Ellipsoid.packedLength,i[r++]=e._cornerType,i[r]=e._granularity,i};var w=y.Ellipsoid.clone(y.Ellipsoid.UNIT_SPHERE),L={polylinePositions:void 0,shapePositions:void 0,ellipsoid:w,height:void 0,cornerType:void 0,granularity:void 0};D.unpack=function(e,i,r){if(!d.defined(e))throw new u.DeveloperError("array is required");var n;i=c.defaultValue(i,0);var t=e[i++],a=new Array(t);for(n=0;n<t;++n,i+=y.Cartesian3.packedLength)a[n]=y.Cartesian3.unpack(e,i);t=e[i++];var o=new Array(t);for(n=0;n<t;++n,i+=y.Cartesian2.packedLength)o[n]=y.Cartesian2.unpack(e,i);var l=y.Ellipsoid.unpack(e,i,w);i+=y.Ellipsoid.packedLength;var s=e[i++],p=e[i];return d.defined(r)?(r._positions=a,r._shape=o,r._ellipsoid=y.Ellipsoid.clone(l,r._ellipsoid),r._cornerType=s,r._granularity=p,r):(L.polylinePositions=a,L.shapePositions=o,L.cornerType=s,L.granularity=p,new D(L))};var T=new p.BoundingRectangle;return D.createGeometry=function(e){var i=e._positions,r=s.arrayRemoveDuplicates(i,y.Cartesian3.equalsEpsilon),n=e._shape;if(n=b.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(n),!(r.length<2||n.length<3)){_.PolygonPipeline.computeWindingOrder2D(n)===_.WindingOrder.CLOCKWISE&&n.reverse();var t=p.BoundingRectangle.fromPoints(n,T);return function(e,i){var r=new v.GeometryAttributes;r.position=new g.GeometryAttribute({componentDatatype:h.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e});var n,t,a=i.length,o=r.position.values.length/3,l=e.length/3/a,s=m.IndexDatatype.createTypedArray(o,2*a*(1+l)),p=0,d=(n=0)*a;for(t=0;t<a-1;t++)s[p++]=t+d,s[p++]=t+d+1;for(s[p++]=a-1+d,s[p++]=d,d=(n=l-1)*a,t=0;t<a-1;t++)s[p++]=t+d,s[p++]=t+d+1;for(s[p++]=a-1+d,s[p++]=d,n=0;n<l-1;n++){var u=a*n,c=u+a;for(t=0;t<a;t++)s[p++]=t+u,s[p++]=t+c}return new g.Geometry({attributes:r,indices:m.IndexDatatype.createTypedArray(o,s),boundingSphere:f.BoundingSphere.fromVertices(e),primitiveType:g.PrimitiveType.LINES})}(b.PolylineVolumeGeometryLibrary.computePositions(r,n,t,e,!1),n)}},function(e,i){return d.defined(i)&&(e=D.unpack(e,i)),e._ellipsoid=y.Ellipsoid.clone(e._ellipsoid),D.createGeometry(e)}});
