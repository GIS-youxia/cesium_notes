/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["exports","./defined-b9ff0e39","./Check-e6691f86","./defaultValue-199f5aa8","./Math-2145e044","./Cartesian2-40ed5530","./Transforms-94513c2d","./Plane-297770b0","./EllipsoidTangentPlane-1ba7ce65"],function(e,N,v,E,A,D,P,O,I){"use strict";function L(e,a){this.center=D.Cartesian3.clone(E.defaultValue(e,D.Cartesian3.ZERO)),this.halfAxes=P.Matrix3.clone(E.defaultValue(a,P.Matrix3.ZERO))}L.packedLength=D.Cartesian3.packedLength+P.Matrix3.packedLength,L.pack=function(e,a,t){return v.Check.typeOf.object("value",e),v.Check.defined("array",a),t=E.defaultValue(t,0),D.Cartesian3.pack(e.center,a,t),P.Matrix3.pack(e.halfAxes,a,t+D.Cartesian3.packedLength),a},L.unpack=function(e,a,t){return v.Check.defined("array",e),a=E.defaultValue(a,0),N.defined(t)||(t=new L),D.Cartesian3.unpack(e,a,t.center),P.Matrix3.unpack(e,a+D.Cartesian3.packedLength,t.halfAxes),t};var q=new D.Cartesian3,S=new D.Cartesian3,R=new D.Cartesian3,T=new D.Cartesian3,V=new D.Cartesian3,z=new D.Cartesian3,U=new P.Matrix3,k={unitary:new P.Matrix3,diagonal:new P.Matrix3};L.fromPoints=function(e,a){if(N.defined(a)||(a=new L),!N.defined(e)||0===e.length)return a.halfAxes=P.Matrix3.ZERO,a.center=D.Cartesian3.ZERO,a;var t,r=e.length,n=D.Cartesian3.clone(e[0],q);for(t=1;t<r;t++)D.Cartesian3.add(n,e[t],n);var i=1/r;D.Cartesian3.multiplyByScalar(n,i,n);var s,o=0,d=0,u=0,l=0,C=0,c=0;for(t=0;t<r;t++)o+=(s=D.Cartesian3.subtract(e[t],n,S)).x*s.x,d+=s.x*s.y,u+=s.x*s.z,l+=s.y*s.y,C+=s.y*s.z,c+=s.z*s.z;o*=i,d*=i,u*=i,l*=i,C*=i,c*=i;var h=U;h[0]=o,h[1]=d,h[2]=u,h[3]=d,h[4]=l,h[5]=C,h[6]=u,h[7]=C,h[8]=c;var f=P.Matrix3.computeEigenDecomposition(h,k),x=P.Matrix3.clone(f.unitary,a.halfAxes),M=P.Matrix3.getColumn(x,0,T),m=P.Matrix3.getColumn(x,1,V),w=P.Matrix3.getColumn(x,2,z),p=-Number.MAX_VALUE,g=-Number.MAX_VALUE,y=-Number.MAX_VALUE,b=Number.MAX_VALUE,v=Number.MAX_VALUE,E=Number.MAX_VALUE;for(t=0;t<r;t++)s=e[t],p=Math.max(D.Cartesian3.dot(M,s),p),g=Math.max(D.Cartesian3.dot(m,s),g),y=Math.max(D.Cartesian3.dot(w,s),y),b=Math.min(D.Cartesian3.dot(M,s),b),v=Math.min(D.Cartesian3.dot(m,s),v),E=Math.min(D.Cartesian3.dot(w,s),E);M=D.Cartesian3.multiplyByScalar(M,.5*(b+p),M),m=D.Cartesian3.multiplyByScalar(m,.5*(v+g),m),w=D.Cartesian3.multiplyByScalar(w,.5*(E+y),w);var A=D.Cartesian3.add(M,m,a.center);D.Cartesian3.add(A,w,A);var O=R;return O.x=p-b,O.y=g-v,O.z=y-E,D.Cartesian3.multiplyByScalar(O,.5,O),P.Matrix3.multiplyByScale(a.halfAxes,O,a.halfAxes),a};var B=new D.Cartesian3,W=new D.Cartesian3;var _=new D.Cartographic,X=new D.Cartesian3,Z=[new D.Cartographic,new D.Cartographic,new D.Cartographic,new D.Cartographic,new D.Cartographic,new D.Cartographic,new D.Cartographic,new D.Cartographic],G=[new D.Cartesian3,new D.Cartesian3,new D.Cartesian3,new D.Cartesian3,new D.Cartesian3,new D.Cartesian3,new D.Cartesian3,new D.Cartesian3],Y=[new D.Cartesian2,new D.Cartesian2,new D.Cartesian2,new D.Cartesian2,new D.Cartesian2,new D.Cartesian2,new D.Cartesian2,new D.Cartesian2];L.fromRectangle=function(e,a,t,r,n){if(!N.defined(e))throw new v.DeveloperError("rectangle is required");if(e.width<0||e.width>A.CesiumMath.TWO_PI)throw new v.DeveloperError("Rectangle width must be between 0 and 2*pi");if(e.height<0||e.height>A.CesiumMath.PI)throw new v.DeveloperError("Rectangle height must be between 0 and pi");if(N.defined(r)&&!A.CesiumMath.equalsEpsilon(r.radii.x,r.radii.y,A.CesiumMath.EPSILON15))throw new v.DeveloperError("Ellipsoid must be an ellipsoid of revolution (radii.x == radii.y)");a=E.defaultValue(a,0),t=E.defaultValue(t,0),r=E.defaultValue(r,D.Ellipsoid.WGS84);var i=D.Rectangle.center(e,_),s=r.cartographicToCartesian(i,X),o=new I.EllipsoidTangentPlane(s,r),d=o.plane,u=Z[0],l=Z[1],C=Z[2],c=Z[3],h=Z[4],f=Z[5],x=Z[6],M=Z[7],m=i.longitude,w=e.south<0&&0<e.north?0:i.latitude;x.latitude=f.latitude=h.latitude=e.south,M.latitude=c.latitude=w,u.latitude=l.latitude=C.latitude=e.north,x.longitude=M.longitude=u.longitude=e.west,f.longitude=l.longitude=m,h.longitude=c.longitude=C.longitude=e.east,C.height=l.height=u.height=M.height=x.height=f.height=h.height=c.height=t,r.cartographicArrayToCartesianArray(Z,G),o.projectPointsToNearestOnPlane(G,Y);var p=Math.min(Y[6].x,Y[7].x,Y[0].x),g=Math.max(Y[2].x,Y[3].x,Y[4].x),y=Math.min(Y[4].y,Y[5].y,Y[6].y),b=Math.max(Y[0].y,Y[1].y,Y[2].y);return C.height=u.height=h.height=x.height=a,r.cartographicArrayToCartesianArray(Z,G),function(e,a,t,r,n,i,s,o){if(!(N.defined(a)&&N.defined(t)&&N.defined(r)&&N.defined(n)&&N.defined(i)&&N.defined(s)))throw new v.DeveloperError("all extents (minimum/maximum X/Y/Z) are required.");N.defined(o)||(o=new L);var d=o.halfAxes;P.Matrix3.setColumn(d,0,e.xAxis,d),P.Matrix3.setColumn(d,1,e.yAxis,d),P.Matrix3.setColumn(d,2,e.zAxis,d);var u=B;u.x=(a+t)/2,u.y=(r+n)/2,u.z=(i+s)/2;var l=W;l.x=(t-a)/2,l.y=(n-r)/2,l.z=(s-i)/2;var C=o.center;return u=P.Matrix3.multiplyByVector(d,u,u),D.Cartesian3.add(e.origin,u,C),P.Matrix3.multiplyByScale(d,l,d),o}(o,p,g,y,b,Math.min(O.Plane.getPointDistance(d,G[0]),O.Plane.getPointDistance(d,G[2]),O.Plane.getPointDistance(d,G[4]),O.Plane.getPointDistance(d,G[6])),t,n)},L.clone=function(e,a){if(N.defined(e))return N.defined(a)?(D.Cartesian3.clone(e.center,a.center),P.Matrix3.clone(e.halfAxes,a.halfAxes),a):new L(e.center,e.halfAxes)},L.intersectPlane=function(e,a){if(!N.defined(e))throw new v.DeveloperError("box is required.");if(!N.defined(a))throw new v.DeveloperError("plane is required.");var t=e.center,r=a.normal,n=e.halfAxes,i=r.x,s=r.y,o=r.z,d=Math.abs(i*n[P.Matrix3.COLUMN0ROW0]+s*n[P.Matrix3.COLUMN0ROW1]+o*n[P.Matrix3.COLUMN0ROW2])+Math.abs(i*n[P.Matrix3.COLUMN1ROW0]+s*n[P.Matrix3.COLUMN1ROW1]+o*n[P.Matrix3.COLUMN1ROW2])+Math.abs(i*n[P.Matrix3.COLUMN2ROW0]+s*n[P.Matrix3.COLUMN2ROW1]+o*n[P.Matrix3.COLUMN2ROW2]),u=D.Cartesian3.dot(r,t)+a.distance;return u<=-d?P.Intersect.OUTSIDE:d<=u?P.Intersect.INSIDE:P.Intersect.INTERSECTING};var f=new D.Cartesian3,x=new D.Cartesian3,M=new D.Cartesian3,h=new D.Cartesian3;L.distanceSquaredTo=function(e,a){if(!N.defined(e))throw new v.DeveloperError("box is required.");if(!N.defined(a))throw new v.DeveloperError("cartesian is required.");var t=D.Cartesian3.subtract(a,e.center,B),r=e.halfAxes,n=P.Matrix3.getColumn(r,0,f),i=P.Matrix3.getColumn(r,1,x),s=P.Matrix3.getColumn(r,2,M),o=D.Cartesian3.magnitude(n),d=D.Cartesian3.magnitude(i),u=D.Cartesian3.magnitude(s);D.Cartesian3.normalize(n,n),D.Cartesian3.normalize(i,i),D.Cartesian3.normalize(s,s);var l=h;l.x=D.Cartesian3.dot(t,n),l.y=D.Cartesian3.dot(t,i),l.z=D.Cartesian3.dot(t,s);var C,c=0;return l.x<-o?c+=(C=l.x+o)*C:l.x>o&&(c+=(C=l.x-o)*C),l.y<-d?c+=(C=l.y+d)*C:l.y>d&&(c+=(C=l.y-d)*C),l.z<-u?c+=(C=l.z+u)*C:l.z>u&&(c+=(C=l.z-u)*C),c};var m=new D.Cartesian3,w=new D.Cartesian3;L.computePlaneDistances=function(e,a,t,r){if(!N.defined(e))throw new v.DeveloperError("box is required.");if(!N.defined(a))throw new v.DeveloperError("position is required.");if(!N.defined(t))throw new v.DeveloperError("direction is required.");N.defined(r)||(r=new P.Interval);var n=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY,s=e.center,o=e.halfAxes,d=P.Matrix3.getColumn(o,0,f),u=P.Matrix3.getColumn(o,1,x),l=P.Matrix3.getColumn(o,2,M),C=D.Cartesian3.add(d,u,m);D.Cartesian3.add(C,l,C),D.Cartesian3.add(C,s,C);var c=D.Cartesian3.subtract(C,a,w),h=D.Cartesian3.dot(t,c);return n=Math.min(h,n),i=Math.max(h,i),D.Cartesian3.add(s,d,C),D.Cartesian3.add(C,u,C),D.Cartesian3.subtract(C,l,C),D.Cartesian3.subtract(C,a,c),h=D.Cartesian3.dot(t,c),n=Math.min(h,n),i=Math.max(h,i),D.Cartesian3.add(s,d,C),D.Cartesian3.subtract(C,u,C),D.Cartesian3.add(C,l,C),D.Cartesian3.subtract(C,a,c),h=D.Cartesian3.dot(t,c),n=Math.min(h,n),i=Math.max(h,i),D.Cartesian3.add(s,d,C),D.Cartesian3.subtract(C,u,C),D.Cartesian3.subtract(C,l,C),D.Cartesian3.subtract(C,a,c),h=D.Cartesian3.dot(t,c),n=Math.min(h,n),i=Math.max(h,i),D.Cartesian3.subtract(s,d,C),D.Cartesian3.add(C,u,C),D.Cartesian3.add(C,l,C),D.Cartesian3.subtract(C,a,c),h=D.Cartesian3.dot(t,c),n=Math.min(h,n),i=Math.max(h,i),D.Cartesian3.subtract(s,d,C),D.Cartesian3.add(C,u,C),D.Cartesian3.subtract(C,l,C),D.Cartesian3.subtract(C,a,c),h=D.Cartesian3.dot(t,c),n=Math.min(h,n),i=Math.max(h,i),D.Cartesian3.subtract(s,d,C),D.Cartesian3.subtract(C,u,C),D.Cartesian3.add(C,l,C),D.Cartesian3.subtract(C,a,c),h=D.Cartesian3.dot(t,c),n=Math.min(h,n),i=Math.max(h,i),D.Cartesian3.subtract(s,d,C),D.Cartesian3.subtract(C,u,C),D.Cartesian3.subtract(C,l,C),D.Cartesian3.subtract(C,a,c),h=D.Cartesian3.dot(t,c),n=Math.min(h,n),i=Math.max(h,i),r.start=n,r.stop=i,r};var r=new P.BoundingSphere;L.isOccluded=function(e,a){if(!N.defined(e))throw new v.DeveloperError("box is required.");if(!N.defined(a))throw new v.DeveloperError("occluder is required.");var t=P.BoundingSphere.fromOrientedBoundingBox(e,r);return!a.isBoundingSphereVisible(t)},L.prototype.intersectPlane=function(e){return L.intersectPlane(this,e)},L.prototype.distanceSquaredTo=function(e){return L.distanceSquaredTo(this,e)},L.prototype.computePlaneDistances=function(e,a,t){return L.computePlaneDistances(this,e,a,t)},L.prototype.isOccluded=function(e){return L.isOccluded(this,e)},L.equals=function(e,a){return e===a||N.defined(e)&&N.defined(a)&&D.Cartesian3.equals(e.center,a.center)&&P.Matrix3.equals(e.halfAxes,a.halfAxes)},L.prototype.clone=function(e){return L.clone(this,e)},L.prototype.equals=function(e){return L.equals(this,e)},e.OrientedBoundingBox=L});
