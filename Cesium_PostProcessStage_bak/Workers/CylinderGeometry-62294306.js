/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["exports","./defined-b9ff0e39","./Check-e6691f86","./defaultValue-199f5aa8","./Math-2145e044","./Cartesian2-40ed5530","./Transforms-94513c2d","./ComponentDatatype-9477db2c","./GeometryAttribute-4754007e","./GeometryAttributes-c3465b51","./IndexDatatype-668aa2f9","./GeometryOffsetAttribute-5aa2ee88","./VertexFormat-61bc2255","./CylinderGeometryLibrary-c0d72f53"],function(e,I,f,m,U,S,q,B,Y,Z,J,W,d,j){"use strict";var H=new S.Cartesian2,K=new S.Cartesian3,Q=new S.Cartesian3,X=new S.Cartesian3,$=new S.Cartesian3;function p(e){var t=(e=m.defaultValue(e,m.defaultValue.EMPTY_OBJECT)).length,r=e.topRadius,a=e.bottomRadius,o=m.defaultValue(e.vertexFormat,d.VertexFormat.DEFAULT),n=m.defaultValue(e.slices,128);if(!I.defined(t))throw new f.DeveloperError("options.length must be defined.");if(!I.defined(r))throw new f.DeveloperError("options.topRadius must be defined.");if(!I.defined(a))throw new f.DeveloperError("options.bottomRadius must be defined.");if(n<3)throw new f.DeveloperError("options.slices must be greater than or equal to 3.");if(I.defined(e.offsetAttribute)&&e.offsetAttribute===W.GeometryOffsetAttribute.TOP)throw new f.DeveloperError("GeometryOffsetAttribute.TOP is not a supported options.offsetAttribute for this geometry.");this._length=t,this._topRadius=r,this._bottomRadius=a,this._vertexFormat=d.VertexFormat.clone(o),this._slices=n,this._offsetAttribute=e.offsetAttribute,this._workerName="createCylinderGeometry"}p.packedLength=d.VertexFormat.packedLength+5,p.pack=function(e,t,r){if(!I.defined(e))throw new f.DeveloperError("value is required");if(!I.defined(t))throw new f.DeveloperError("array is required");return r=m.defaultValue(r,0),d.VertexFormat.pack(e._vertexFormat,t,r),r+=d.VertexFormat.packedLength,t[r++]=e._length,t[r++]=e._topRadius,t[r++]=e._bottomRadius,t[r++]=e._slices,t[r]=m.defaultValue(e._offsetAttribute,-1),t};var t,l=new d.VertexFormat,y={vertexFormat:l,length:void 0,topRadius:void 0,bottomRadius:void 0,slices:void 0,offsetAttribute:void 0};p.unpack=function(e,t,r){if(!I.defined(e))throw new f.DeveloperError("array is required");t=m.defaultValue(t,0);var a=d.VertexFormat.unpack(e,t,l);t+=d.VertexFormat.packedLength;var o=e[t++],n=e[t++],i=e[t++],s=e[t++],u=e[t];return I.defined(r)?(r._vertexFormat=d.VertexFormat.clone(a,r._vertexFormat),r._length=o,r._topRadius=n,r._bottomRadius=i,r._slices=s,r._offsetAttribute=-1===u?void 0:u,r):(y.length=o,y.topRadius=n,y.bottomRadius=i,y.slices=s,y.offsetAttribute=-1===u?void 0:u,new p(y))},p.createGeometry=function(e){var t=e._length,r=e._topRadius,a=e._bottomRadius,o=e._vertexFormat,n=e._slices;if(!(t<=0||r<0||a<0||0===r&&0===a)){var i,s=n+n,u=n+s,f=s+s,m=j.CylinderGeometryLibrary.computePositions(t,r,a,n,!0),d=o.st?new Float32Array(2*f):void 0,p=o.normal?new Float32Array(3*f):void 0,l=o.tangent?new Float32Array(3*f):void 0,y=o.bitangent?new Float32Array(3*f):void 0,b=o.normal||o.tangent||o.bitangent;if(b){var c=o.tangent||o.bitangent,v=0,A=0,h=0,w=Math.atan2(a-r,t),g=K;g.z=Math.sin(w);var x=Math.cos(w),_=X,C=Q;for(i=0;i<n;i++){var F=i/n*U.CesiumMath.TWO_PI,D=x*Math.cos(F),G=x*Math.sin(F);b&&(g.x=D,g.y=G,c&&(_=S.Cartesian3.normalize(S.Cartesian3.cross(S.Cartesian3.UNIT_Z,g,_),_)),o.normal&&(p[v++]=g.x,p[v++]=g.y,p[v++]=g.z,p[v++]=g.x,p[v++]=g.y,p[v++]=g.z),o.tangent&&(l[A++]=_.x,l[A++]=_.y,l[A++]=_.z,l[A++]=_.x,l[A++]=_.y,l[A++]=_.z),o.bitangent&&(C=S.Cartesian3.normalize(S.Cartesian3.cross(g,_,C),C),y[h++]=C.x,y[h++]=C.y,y[h++]=C.z,y[h++]=C.x,y[h++]=C.y,y[h++]=C.z))}for(i=0;i<n;i++)o.normal&&(p[v++]=0,p[v++]=0,p[v++]=-1),o.tangent&&(l[A++]=1,l[A++]=0,l[A++]=0),o.bitangent&&(y[h++]=0,y[h++]=-1,y[h++]=0);for(i=0;i<n;i++)o.normal&&(p[v++]=0,p[v++]=0,p[v++]=1),o.tangent&&(l[A++]=1,l[A++]=0,l[A++]=0),o.bitangent&&(y[h++]=0,y[h++]=1,y[h++]=0)}var R=12*n-12,O=J.IndexDatatype.createTypedArray(f,R),V=0,T=0;for(i=0;i<n-1;i++)O[V++]=T,O[V++]=T+2,O[V++]=T+3,O[V++]=T,O[V++]=T+3,O[V++]=T+1,T+=2;for(O[V++]=s-2,O[V++]=0,O[V++]=1,O[V++]=s-2,O[V++]=1,O[V++]=s-1,i=1;i<n-1;i++)O[V++]=s+i+1,O[V++]=s+i,O[V++]=s;for(i=1;i<n-1;i++)O[V++]=u,O[V++]=u+i,O[V++]=u+i+1;var E=0;if(o.st){var L=Math.max(r,a);for(i=0;i<f;i++){var P=S.Cartesian3.fromArray(m,3*i,$);d[E++]=(P.x+L)/(2*L),d[E++]=(P.y+L)/(2*L)}}var k=new Z.GeometryAttributes;o.position&&(k.position=new Y.GeometryAttribute({componentDatatype:B.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:m})),o.normal&&(k.normal=new Y.GeometryAttribute({componentDatatype:B.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:p})),o.tangent&&(k.tangent=new Y.GeometryAttribute({componentDatatype:B.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:l})),o.bitangent&&(k.bitangent=new Y.GeometryAttribute({componentDatatype:B.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:y})),o.st&&(k.st=new Y.GeometryAttribute({componentDatatype:B.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:d})),H.x=.5*t,H.y=Math.max(a,r);var M=new q.BoundingSphere(S.Cartesian3.ZERO,S.Cartesian2.magnitude(H));if(I.defined(e._offsetAttribute)){t=m.length;var z=new Uint8Array(t/3),N=e._offsetAttribute===W.GeometryOffsetAttribute.NONE?0:1;W.arrayFill(z,N),k.applyOffset=new Y.GeometryAttribute({componentDatatype:B.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:z})}return new Y.Geometry({attributes:k,indices:O,primitiveType:Y.PrimitiveType.TRIANGLES,boundingSphere:M,offsetAttribute:e._offsetAttribute})}},p.getUnitCylinder=function(){return I.defined(t)||(t=p.createGeometry(new p({topRadius:1,bottomRadius:1,length:1,vertexFormat:d.VertexFormat.POSITION_ONLY}))),t},e.CylinderGeometry=p});
