/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./defined-b9ff0e39","./Check-e6691f86","./freezeObject-2d5b18ce","./defaultValue-199f5aa8","./Math-2145e044","./Cartesian2-40ed5530","./defineProperties-ae15c9d5","./Transforms-94513c2d","./RuntimeError-d5522ee3","./WebGLConstants-554ddbe2","./ComponentDatatype-9477db2c","./GeometryAttribute-4754007e","./when-c208a7cf","./GeometryAttributes-c3465b51","./AttributeCompression-a7396e6f","./GeometryPipeline-bd87b3b1","./EncodedCartesian3-e7615897","./IndexDatatype-668aa2f9","./IntersectionTests-f6d27a39","./Plane-297770b0","./VertexFormat-61bc2255","./arrayRemoveDuplicates-32bbc2e4","./BoundingRectangle-1f97a102","./EllipsoidTangentPlane-1ba7ce65","./EllipsoidRhumbLine-d5ed1c3f","./PolygonPipeline-eaa2424e","./PolylineVolumeGeometryLibrary-ee24167c","./EllipsoidGeodesic-b257688e","./PolylinePipeline-5ad419cb"],function(u,c,e,y,i,m,t,G,r,n,x,A,a,R,o,O,l,S,s,p,g,d,f,h,v,B,b,E,P){"use strict";function _(e){var t=(e=y.defaultValue(e,y.defaultValue.EMPTY_OBJECT)).polylinePositions,r=e.shapePositions;if(!u.defined(t))throw new c.DeveloperError("options.polylinePositions is required.");if(!u.defined(r))throw new c.DeveloperError("options.shapePositions is required.");this._positions=t,this._shape=r,this._ellipsoid=m.Ellipsoid.clone(y.defaultValue(e.ellipsoid,m.Ellipsoid.WGS84)),this._cornerType=y.defaultValue(e.cornerType,b.CornerType.ROUNDED),this._vertexFormat=g.VertexFormat.clone(y.defaultValue(e.vertexFormat,g.VertexFormat.DEFAULT)),this._granularity=y.defaultValue(e.granularity,i.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";var n=1+t.length*m.Cartesian3.packedLength;n+=1+r.length*m.Cartesian2.packedLength,this.packedLength=n+m.Ellipsoid.packedLength+g.VertexFormat.packedLength+2}_.pack=function(e,t,r){if(!u.defined(e))throw new c.DeveloperError("value is required");if(!u.defined(t))throw new c.DeveloperError("array is required");var n;r=y.defaultValue(r,0);var i=e._positions,a=i.length;for(t[r++]=a,n=0;n<a;++n,r+=m.Cartesian3.packedLength)m.Cartesian3.pack(i[n],t,r);var o=e._shape;for(a=o.length,t[r++]=a,n=0;n<a;++n,r+=m.Cartesian2.packedLength)m.Cartesian2.pack(o[n],t,r);return m.Ellipsoid.pack(e._ellipsoid,t,r),r+=m.Ellipsoid.packedLength,g.VertexFormat.pack(e._vertexFormat,t,r),r+=g.VertexFormat.packedLength,t[r++]=e._cornerType,t[r]=e._granularity,t};var k=m.Ellipsoid.clone(m.Ellipsoid.UNIT_SPHERE),C=new g.VertexFormat,V={polylinePositions:void 0,shapePositions:void 0,ellipsoid:k,vertexFormat:C,cornerType:void 0,granularity:void 0};_.unpack=function(e,t,r){if(!u.defined(e))throw new c.DeveloperError("array is required");var n;t=y.defaultValue(t,0);var i=e[t++],a=new Array(i);for(n=0;n<i;++n,t+=m.Cartesian3.packedLength)a[n]=m.Cartesian3.unpack(e,t);i=e[t++];var o=new Array(i);for(n=0;n<i;++n,t+=m.Cartesian2.packedLength)o[n]=m.Cartesian2.unpack(e,t);var l=m.Ellipsoid.unpack(e,t,k);t+=m.Ellipsoid.packedLength;var s=g.VertexFormat.unpack(e,t,C);t+=g.VertexFormat.packedLength;var p=e[t++],d=e[t];return u.defined(r)?(r._positions=a,r._shape=o,r._ellipsoid=m.Ellipsoid.clone(l,r._ellipsoid),r._vertexFormat=g.VertexFormat.clone(s,r._vertexFormat),r._cornerType=p,r._granularity=d,r):(V.polylinePositions=a,V.shapePositions=o,V.cornerType=p,V.granularity=d,new _(V))};var w=new f.BoundingRectangle;return _.createGeometry=function(e){var t=e._positions,r=d.arrayRemoveDuplicates(t,m.Cartesian3.equalsEpsilon),n=e._shape;if(n=b.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(n),!(r.length<2||n.length<3)){B.PolygonPipeline.computeWindingOrder2D(n)===B.WindingOrder.CLOCKWISE&&n.reverse();var i=f.BoundingRectangle.fromPoints(n,w);return function(e,t,r,n){var i=new R.GeometryAttributes;n.position&&(i.position=new A.GeometryAttribute({componentDatatype:x.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));var a,o,l,s,p,d,u=t.length,c=e.length/3,y=(c-2*u)/(2*u),m=B.PolygonPipeline.triangulate(t),g=(y-1)*u*6+2*m.length,f=S.IndexDatatype.createTypedArray(c,g),h=2*u,v=0;for(a=0;a<y-1;a++){for(o=0;o<u-1;o++)d=(l=2*o+a*u*2)+h,p=(s=l+1)+h,f[v++]=s,f[v++]=l,f[v++]=p,f[v++]=p,f[v++]=l,f[v++]=d;p=(s=(l=2*u-2+a*u*2)+1)+h,d=l+h,f[v++]=s,f[v++]=l,f[v++]=p,f[v++]=p,f[v++]=l,f[v++]=d}if(n.st||n.tangent||n.bitangent){var b,E,P=new Float32Array(2*c),_=1/(y-1),k=1/r.height,C=r.height/2,V=0;for(a=0;a<y;a++){for(b=a*_,E=k*(t[0].y+C),P[V++]=b,P[V++]=E,o=1;o<u;o++)E=k*(t[o].y+C),P[V++]=b,P[V++]=E,P[V++]=b,P[V++]=E;E=k*(t[0].y+C),P[V++]=b,P[V++]=E}for(o=0;o<u;o++)b=0,E=k*(t[o].y+C),P[V++]=b,P[V++]=E;for(o=0;o<u;o++)b=(y-1)*_,E=k*(t[o].y+C),P[V++]=b,P[V++]=E;i.st=new A.GeometryAttribute({componentDatatype:x.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(P)})}var w=c-2*u;for(a=0;a<m.length;a+=3){var L=m[a]+w,D=m[a+1]+w,F=m[a+2]+w;f[v++]=L,f[v++]=D,f[v++]=F,f[v++]=F+u,f[v++]=D+u,f[v++]=L+u}var T=new A.Geometry({attributes:i,indices:f,boundingSphere:G.BoundingSphere.fromVertices(e),primitiveType:A.PrimitiveType.TRIANGLES});if(n.normal&&(T=O.GeometryPipeline.computeNormal(T)),n.tangent||n.bitangent){try{T=O.GeometryPipeline.computeTangentAndBitangent(T)}catch(e){G.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}n.tangent||(T.attributes.tangent=void 0),n.bitangent||(T.attributes.bitangent=void 0),n.st||(T.attributes.st=void 0)}return T}(b.PolylineVolumeGeometryLibrary.computePositions(r,n,i,e,!0),n,i,e._vertexFormat)}},function(e,t){return u.defined(t)&&(e=_.unpack(e,t)),e._ellipsoid=m.Ellipsoid.clone(e._ellipsoid),_.createGeometry(e)}});
