/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./defined-b9ff0e39","./Check-e6691f86","./freezeObject-2d5b18ce","./defaultValue-199f5aa8","./Math-2145e044","./Cartesian2-40ed5530","./defineProperties-ae15c9d5","./Transforms-94513c2d","./RuntimeError-d5522ee3","./WebGLConstants-554ddbe2","./ComponentDatatype-9477db2c","./GeometryAttribute-4754007e","./when-c208a7cf","./GeometryAttributes-c3465b51","./IndexDatatype-668aa2f9","./IntersectionTests-f6d27a39","./Plane-297770b0","./VertexFormat-61bc2255","./arrayRemoveDuplicates-32bbc2e4","./ArcType-c72d871a","./EllipsoidRhumbLine-d5ed1c3f","./EllipsoidGeodesic-b257688e","./PolylinePipeline-5ad419cb","./Color-43d6d8f5"],function(j,y,e,f,J,K,t,Q,r,a,X,Z,o,$,ee,n,i,h,te,re,l,s,ae,oe){"use strict";var ne=[];function ie(e,t,r,a,o){var n,i=ne;i.length=o;var l=r.red,s=r.green,p=r.blue,d=r.alpha,c=a.red,u=a.green,y=a.blue,f=a.alpha;if(oe.Color.equals(r,a)){for(n=0;n<o;n++)i[n]=oe.Color.clone(r);return i}var h=(c-l)/o,m=(u-s)/o,v=(y-p)/o,C=(f-d)/o;for(n=0;n<o;n++)i[n]=new oe.Color(l+n*h,s+n*m,p+n*v,d+n*C);return i}function m(e){var t=(e=f.defaultValue(e,f.defaultValue.EMPTY_OBJECT)).positions,r=e.colors,a=f.defaultValue(e.width,1),o=f.defaultValue(e.colorsPerVertex,!1);if(!j.defined(t)||t.length<2)throw new y.DeveloperError("At least two positions are required.");if("number"!=typeof a)throw new y.DeveloperError("width must be a number");if(j.defined(r)&&(o&&r.length<t.length||!o&&r.length<t.length-1))throw new y.DeveloperError("colors has an invalid length.");this._positions=t,this._colors=r,this._width=a,this._colorsPerVertex=o,this._vertexFormat=h.VertexFormat.clone(f.defaultValue(e.vertexFormat,h.VertexFormat.DEFAULT)),this._arcType=f.defaultValue(e.arcType,re.ArcType.GEODESIC),this._granularity=f.defaultValue(e.granularity,J.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=K.Ellipsoid.clone(f.defaultValue(e.ellipsoid,K.Ellipsoid.WGS84)),this._workerName="createPolylineGeometry";var n=1+t.length*K.Cartesian3.packedLength;n+=j.defined(r)?1+r.length*oe.Color.packedLength:1,this.packedLength=n+K.Ellipsoid.packedLength+h.VertexFormat.packedLength+4}m.pack=function(e,t,r){if(!j.defined(e))throw new y.DeveloperError("value is required");if(!j.defined(t))throw new y.DeveloperError("array is required");var a;r=f.defaultValue(r,0);var o=e._positions,n=o.length;for(t[r++]=n,a=0;a<n;++a,r+=K.Cartesian3.packedLength)K.Cartesian3.pack(o[a],t,r);var i=e._colors;for(n=j.defined(i)?i.length:0,t[r++]=n,a=0;a<n;++a,r+=oe.Color.packedLength)oe.Color.pack(i[a],t,r);return K.Ellipsoid.pack(e._ellipsoid,t,r),r+=K.Ellipsoid.packedLength,h.VertexFormat.pack(e._vertexFormat,t,r),r+=h.VertexFormat.packedLength,t[r++]=e._width,t[r++]=e._colorsPerVertex?1:0,t[r++]=e._arcType,t[r]=e._granularity,t};var v=K.Ellipsoid.clone(K.Ellipsoid.UNIT_SPHERE),C=new h.VertexFormat,g={positions:void 0,colors:void 0,ellipsoid:v,vertexFormat:C,width:void 0,colorsPerVertex:void 0,arcType:void 0,granularity:void 0};m.unpack=function(e,t,r){if(!j.defined(e))throw new y.DeveloperError("array is required");var a;t=f.defaultValue(t,0);var o=e[t++],n=new Array(o);for(a=0;a<o;++a,t+=K.Cartesian3.packedLength)n[a]=K.Cartesian3.unpack(e,t);var i=0<(o=e[t++])?new Array(o):void 0;for(a=0;a<o;++a,t+=oe.Color.packedLength)i[a]=oe.Color.unpack(e,t);var l=K.Ellipsoid.unpack(e,t,v);t+=K.Ellipsoid.packedLength;var s=h.VertexFormat.unpack(e,t,C);t+=h.VertexFormat.packedLength;var p=e[t++],d=1===e[t++],c=e[t++],u=e[t];return j.defined(r)?(r._positions=n,r._colors=i,r._ellipsoid=K.Ellipsoid.clone(l,r._ellipsoid),r._vertexFormat=h.VertexFormat.clone(s,r._vertexFormat),r._width=p,r._colorsPerVertex=d,r._arcType=c,r._granularity=u,r):(g.positions=n,g.colors=i,g.width=p,g.colorsPerVertex=d,g.arcType=c,g.granularity=u,new m(g))};var le=new K.Cartesian3,se=new K.Cartesian3,pe=new K.Cartesian3,de=new K.Cartesian3;return m.createGeometry=function(e){var t,r,a,o=e._width,n=e._vertexFormat,i=e._colors,l=e._colorsPerVertex,s=e._arcType,p=e._granularity,d=e._ellipsoid,c=te.arrayRemoveDuplicates(e._positions,K.Cartesian3.equalsEpsilon),u=c.length;if(!(u<2||o<=0)){if(s===re.ArcType.GEODESIC||s===re.ArcType.RHUMB){var y,f;f=s===re.ArcType.GEODESIC?(y=J.CesiumMath.chordLength(p,d.maximumRadius),ae.PolylinePipeline.numberOfPoints):(y=p,ae.PolylinePipeline.numberOfPointsRhumbLine);var h=ae.PolylinePipeline.extractHeights(c,d);if(j.defined(i)){var m=1;for(t=0;t<u-1;++t)m+=f(c[t],c[t+1],y);var v=new Array(m),C=0;for(t=0;t<u-1;++t){var g=c[t],w=c[t+1],E=i[t],b=f(g,w,y);if(l&&t<m){var _=ie(0,0,E,i[t+1],b),A=_.length;for(r=0;r<A;++r)v[C++]=_[r]}else for(r=0;r<b;++r)v[C++]=oe.Color.clone(E)}v[C]=oe.Color.clone(i[i.length-1]),i=v,ne.length=0}c=s===re.ArcType.GEODESIC?ae.PolylinePipeline.generateCartesianArc({positions:c,minDistance:y,ellipsoid:d,height:h}):ae.PolylinePipeline.generateCartesianRhumbArc({positions:c,granularity:y,ellipsoid:d,height:h})}var P,D=4*(u=c.length)-4,T=new Float64Array(3*D),x=new Float64Array(3*D),k=new Float64Array(3*D),V=new Float32Array(2*D),L=n.st?new Float32Array(2*D):void 0,F=j.defined(i)?new Uint8Array(4*D):void 0,G=0,O=0,R=0,I=0;for(r=0;r<u;++r){var S,B;0===r?(P=le,K.Cartesian3.subtract(c[0],c[1],P),K.Cartesian3.add(c[0],P,P)):P=c[r-1],K.Cartesian3.clone(P,pe),K.Cartesian3.clone(c[r],se),r===u-1?(P=le,K.Cartesian3.subtract(c[u-1],c[u-2],P),K.Cartesian3.add(c[u-1],P,P)):P=c[r+1],K.Cartesian3.clone(P,de),j.defined(F)&&(S=0===r||l?i[r]:i[r-1],r!==u-1&&(B=i[r]));var U=r===u-1?2:4;for(a=0===r?2:0;a<U;++a){K.Cartesian3.pack(se,T,G),K.Cartesian3.pack(pe,x,G),K.Cartesian3.pack(de,k,G),G+=3;var N=a-2<0?-1:1;if(V[O++]=a%2*2-1,V[O++]=N*o,n.st&&(L[R++]=r/(u-1),L[R++]=Math.max(V[O-2],0)),j.defined(F)){var q=a<2?S:B;F[I++]=oe.Color.floatToByte(q.red),F[I++]=oe.Color.floatToByte(q.green),F[I++]=oe.Color.floatToByte(q.blue),F[I++]=oe.Color.floatToByte(q.alpha)}}}var M=new $.GeometryAttributes;M.position=new Z.GeometryAttribute({componentDatatype:X.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:T}),M.prevPosition=new Z.GeometryAttribute({componentDatatype:X.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:x}),M.nextPosition=new Z.GeometryAttribute({componentDatatype:X.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:k}),M.expandAndWidth=new Z.GeometryAttribute({componentDatatype:X.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:V}),n.st&&(M.st=new Z.GeometryAttribute({componentDatatype:X.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:L})),j.defined(F)&&(M.color=new Z.GeometryAttribute({componentDatatype:X.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:F,normalize:!0}));var H=ee.IndexDatatype.createTypedArray(D,6*u-6),W=0,Y=0,z=u-1;for(r=0;r<z;++r)H[Y++]=W,H[Y++]=W+2,H[Y++]=W+1,H[Y++]=W+1,H[Y++]=W+2,H[Y++]=W+3,W+=4;return new Z.Geometry({attributes:M,indices:H,primitiveType:Z.PrimitiveType.TRIANGLES,boundingSphere:Q.BoundingSphere.fromPoints(c),geometryType:Z.GeometryType.POLYLINES})}},function(e,t){return j.defined(t)&&(e=m.unpack(e,t)),e._ellipsoid=K.Ellipsoid.clone(e._ellipsoid),m.createGeometry(e)}});
