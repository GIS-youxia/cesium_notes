/**
 * Cesium - https://github.com/AnalyticalGraphicsInc/cesium
 *
 * Copyright 2011-2017 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./defined-b9ff0e39","./Check-e6691f86","./freezeObject-2d5b18ce","./defaultValue-199f5aa8","./Math-2145e044","./Cartesian2-40ed5530","./defineProperties-ae15c9d5","./Transforms-94513c2d","./RuntimeError-d5522ee3","./WebGLConstants-554ddbe2","./ComponentDatatype-9477db2c","./GeometryAttribute-4754007e","./when-c208a7cf","./GeometryAttributes-c3465b51","./IndexDatatype-668aa2f9","./IntersectionTests-f6d27a39","./Plane-297770b0","./VertexFormat-61bc2255","./EllipsoidTangentPlane-1ba7ce65","./EllipsoidRhumbLine-d5ed1c3f","./PolygonPipeline-eaa2424e","./EllipsoidGeodesic-b257688e","./PolylinePipeline-5ad419cb","./WallGeometryLibrary-c3ece839"],function(j,p,e,u,Z,K,t,Q,i,r,X,$,a,ee,te,n,o,f,s,l,m,d,c,ie){"use strict";var re=new K.Cartesian3,ae=new K.Cartesian3,ne=new K.Cartesian3,oe=new K.Cartesian3,se=new K.Cartesian3,le=new K.Cartesian3,me=new K.Cartesian3,de=new K.Cartesian3;function h(e){var t=(e=u.defaultValue(e,u.defaultValue.EMPTY_OBJECT)).positions,i=e.maximumHeights,r=e.minimumHeights;if(!j.defined(t))throw new p.DeveloperError("options.positions is required.");if(j.defined(i)&&i.length!==t.length)throw new p.DeveloperError("options.positions and options.maximumHeights must have the same length.");if(j.defined(r)&&r.length!==t.length)throw new p.DeveloperError("options.positions and options.minimumHeights must have the same length.");var a=u.defaultValue(e.vertexFormat,f.VertexFormat.DEFAULT),n=u.defaultValue(e.granularity,Z.CesiumMath.RADIANS_PER_DEGREE),o=u.defaultValue(e.ellipsoid,K.Ellipsoid.WGS84);this._positions=t,this._minimumHeights=r,this._maximumHeights=i,this._vertexFormat=f.VertexFormat.clone(a),this._granularity=n,this._ellipsoid=K.Ellipsoid.clone(o),this._workerName="createWallGeometry";var s=1+t.length*K.Cartesian3.packedLength+2;j.defined(r)&&(s+=r.length),j.defined(i)&&(s+=i.length),this.packedLength=s+K.Ellipsoid.packedLength+f.VertexFormat.packedLength+1}h.pack=function(e,t,i){if(!j.defined(e))throw new p.DeveloperError("value is required");if(!j.defined(t))throw new p.DeveloperError("array is required");var r;i=u.defaultValue(i,0);var a=e._positions,n=a.length;for(t[i++]=n,r=0;r<n;++r,i+=K.Cartesian3.packedLength)K.Cartesian3.pack(a[r],t,i);var o=e._minimumHeights;if(n=j.defined(o)?o.length:0,t[i++]=n,j.defined(o))for(r=0;r<n;++r)t[i++]=o[r];var s=e._maximumHeights;if(n=j.defined(s)?s.length:0,t[i++]=n,j.defined(s))for(r=0;r<n;++r)t[i++]=s[r];return K.Ellipsoid.pack(e._ellipsoid,t,i),i+=K.Ellipsoid.packedLength,f.VertexFormat.pack(e._vertexFormat,t,i),t[i+=f.VertexFormat.packedLength]=e._granularity,t};var g=K.Ellipsoid.clone(K.Ellipsoid.UNIT_SPHERE),y=new f.VertexFormat,v={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:g,vertexFormat:y,granularity:void 0};return h.unpack=function(e,t,i){if(!j.defined(e))throw new p.DeveloperError("array is required");var r;t=u.defaultValue(t,0);var a,n,o=e[t++],s=new Array(o);for(r=0;r<o;++r,t+=K.Cartesian3.packedLength)s[r]=K.Cartesian3.unpack(e,t);if(0<(o=e[t++]))for(a=new Array(o),r=0;r<o;++r)a[r]=e[t++];if(0<(o=e[t++]))for(n=new Array(o),r=0;r<o;++r)n[r]=e[t++];var l=K.Ellipsoid.unpack(e,t,g);t+=K.Ellipsoid.packedLength;var m=f.VertexFormat.unpack(e,t,y),d=e[t+=f.VertexFormat.packedLength];return j.defined(i)?(i._positions=s,i._minimumHeights=a,i._maximumHeights=n,i._ellipsoid=K.Ellipsoid.clone(l,i._ellipsoid),i._vertexFormat=f.VertexFormat.clone(m,i._vertexFormat),i._granularity=d,i):(v.positions=s,v.minimumHeights=a,v.maximumHeights=n,v.granularity=d,new h(v))},h.fromConstantHeights=function(e){var t,i,r=(e=u.defaultValue(e,u.defaultValue.EMPTY_OBJECT)).positions;if(!j.defined(r))throw new p.DeveloperError("options.positions is required.");var a=e.minimumHeight,n=e.maximumHeight,o=j.defined(a),s=j.defined(n);if(o||s){var l=r.length;t=o?new Array(l):void 0,i=s?new Array(l):void 0;for(var m=0;m<l;++m)o&&(t[m]=a),s&&(i[m]=n)}return new h({positions:r,maximumHeights:i,minimumHeights:t,ellipsoid:e.ellipsoid,vertexFormat:e.vertexFormat})},h.createGeometry=function(e){var t=e._positions,i=e._minimumHeights,r=e._maximumHeights,a=e._vertexFormat,n=e._granularity,o=e._ellipsoid,s=ie.WallGeometryLibrary.computePositions(o,t,r,i,n,!0);if(j.defined(s)){var l,m=s.bottomPositions,d=s.topPositions,p=s.numCorners,u=d.length,f=2*u,c=a.position?new Float64Array(f):void 0,h=a.normal?new Float32Array(f):void 0,g=a.tangent?new Float32Array(f):void 0,y=a.bitangent?new Float32Array(f):void 0,v=a.st?new Float32Array(f/3*2):void 0,C=0,w=0,b=0,E=0,x=0,A=de,_=me,F=le,D=!0,L=0,H=1/((u/=3)-t.length+1);for(l=0;l<u;++l){var P=3*l,k=K.Cartesian3.fromArray(d,P,re),G=K.Cartesian3.fromArray(m,P,ae);if(a.position&&(c[C++]=G.x,c[C++]=G.y,c[C++]=G.z,c[C++]=k.x,c[C++]=k.y,c[C++]=k.z),a.st&&(v[x++]=L,v[x++]=0,v[x++]=L,v[x++]=1),a.normal||a.tangent||a.bitangent){var V,T=K.Cartesian3.clone(K.Cartesian3.ZERO,se),z=o.scaleToGeodeticSurface(K.Cartesian3.fromArray(d,P,ae),ae);if(l+1<u&&(V=o.scaleToGeodeticSurface(K.Cartesian3.fromArray(d,3+P,ne),ne),T=K.Cartesian3.fromArray(d,3+P,se)),D){var O=K.Cartesian3.subtract(T,k,oe),S=K.Cartesian3.subtract(z,k,re);A=K.Cartesian3.normalize(K.Cartesian3.cross(S,O,A),A),D=!1}K.Cartesian3.equalsEpsilon(V,z,Z.CesiumMath.EPSILON10)?D=!0:(L+=H,a.tangent&&(_=K.Cartesian3.normalize(K.Cartesian3.subtract(V,z,_),_)),a.bitangent&&(F=K.Cartesian3.normalize(K.Cartesian3.cross(A,_,F),F))),a.normal&&(h[w++]=A.x,h[w++]=A.y,h[w++]=A.z,h[w++]=A.x,h[w++]=A.y,h[w++]=A.z),a.tangent&&(g[E++]=_.x,g[E++]=_.y,g[E++]=_.z,g[E++]=_.x,g[E++]=_.y,g[E++]=_.z),a.bitangent&&(y[b++]=F.x,y[b++]=F.y,y[b++]=F.z,y[b++]=F.x,y[b++]=F.y,y[b++]=F.z)}}var I=new ee.GeometryAttributes;a.position&&(I.position=new $.GeometryAttribute({componentDatatype:X.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:c})),a.normal&&(I.normal=new $.GeometryAttribute({componentDatatype:X.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:h})),a.tangent&&(I.tangent=new $.GeometryAttribute({componentDatatype:X.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:g})),a.bitangent&&(I.bitangent=new $.GeometryAttribute({componentDatatype:X.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:y})),a.st&&(I.st=new $.GeometryAttribute({componentDatatype:X.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:v}));var R=f/3;f-=6*(p+1);var q=te.IndexDatatype.createTypedArray(R,f),M=0;for(l=0;l<R-2;l+=2){var N=l,W=l+2,B=K.Cartesian3.fromArray(c,3*N,re),U=K.Cartesian3.fromArray(c,3*W,ae);if(!K.Cartesian3.equalsEpsilon(B,U,Z.CesiumMath.EPSILON10)){var J=l+1,Y=l+3;q[M++]=J,q[M++]=N,q[M++]=Y,q[M++]=Y,q[M++]=N,q[M++]=W}}return new $.Geometry({attributes:I,indices:q,primitiveType:$.PrimitiveType.TRIANGLES,boundingSphere:new Q.BoundingSphere.fromVertices(c)})}},function(e,t){return j.defined(t)&&(e=h.unpack(e,t)),e._ellipsoid=K.Ellipsoid.clone(e._ellipsoid),h.createGeometry(e)}});
